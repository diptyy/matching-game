{"version":3,"sources":["Components/Images/back.png","Components/Card.jsx","Components/GameOver.jsx","Components/App.jsx","index.js"],"names":["OneCard","props","cardImage","card","matchId","Grid","item","lg","md","sm","xs","className","options","max","scale","right","spy","isFlipped","isSolved","Card","style","borderRadius","boxShadow","CardMedia","component","src","backImg","id","onClick","event","GameOver","cardStyle","Container","maxWidth","container","spacing","alignItems","justify","CardContent","turns","time","App","useState","flippedCards","setFlippedCards","setTurns","timer","setTimer","stopwatch","setStopwatch","seconds","minutes","gameWon","setGameWon","add","cardArray","i","Math","floor","shuffleCards","sort","random","shuffledCards","allCards","setAllCards","handleClick","setInterval","target","parseInt","filter","length","cardIndex","findIndex","newArray","prevValue","console","log","cardsToMatch","cardIndex1","cardIndex2","newArray2","setTimeout","clearInterval","cardsToFlip","flipBack","cardMatch","direction","map","ReactDOM","render","document","getElementById"],"mappings":"gPAAe,MAA0B,iC,iBCoD1BA,MA3Cf,SAAiBC,GAEb,IAKIC,EAAY,GAehB,OAd2B,IAAvBD,EAAME,KAAKC,QACXF,EAAY,kCACkB,IAAvBD,EAAME,KAAKC,QAClBF,EAAY,kCACkB,IAAvBD,EAAME,KAAKC,QAClBF,EAAY,kCACkB,IAAvBD,EAAME,KAAKC,QAClBF,EAAY,kCACkB,IAAvBD,EAAME,KAAKC,QAClBF,EAAY,kCACkB,IAAvBD,EAAME,KAAKC,UAClBF,EAAY,mCAIZ,cAACG,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAApC,SACA,cAAC,IAAD,CAAMC,UAAU,OAAOC,QAAS,CAAEC,IAAK,GAAIC,MAAO,KAAlD,SACA,cAAC,IAAD,CAAMC,OAAK,EAACC,IAAKf,EAAME,KAAKc,UAA5B,SACA,cAAC,IAAD,CAAYD,IAAKf,EAAME,KAAKe,SAA5B,SACA,cAACC,EAAA,EAAD,CAAMZ,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGU,MAzBpB,CACdC,aAAc,MACdC,UAAW,qBAuBX,SACI,cAACC,EAAA,EAAD,CACAC,UAAU,MACVC,IAAMxB,EAAME,KAAKc,UAAYf,EAAYwB,EACzCC,GAAK1B,EAAME,KAAKwB,GAChBC,QAAU3B,EAAME,KAAKe,UAAYjB,EAAME,KAAKc,UAAY,KAAO,SAACY,GAAD,OAAW5B,EAAM2B,QAAQC,iB,iCCIrFC,MArCf,SAAkB7B,GAAO,IAAD,EAEd8B,EAAY,CACdV,aAAc,MACdC,UAAW,qBAGf,OACI,qBAAKX,UAAU,WAAf,SACI,cAACqB,EAAA,EAAD,CAAWC,SAAS,KAApB,SACI,cAAC5B,EAAA,EAAD,CAAM6B,WAAS,EAACC,QAAS,EAAGC,WAAW,SAASC,QAAQ,SAAxD,SACI,cAAChC,EAAA,GAAD,GAAMC,MAAI,GAAV,4CAAoB,GAApB,mBAA2B,GAA3B,yBACI,cAAC,IAAD,UACI,cAACa,EAAA,EAAD,CAAMC,MAAOW,EAAb,SACI,cAACO,EAAA,EAAD,UACI,eAACjC,EAAA,EAAD,CAAM6B,WAAS,EAACE,WAAW,SAASC,QAAQ,SAAS1B,UAAU,QAA/D,UACI,cAACN,EAAA,EAAD,CAAMC,MAAI,EAACI,GAAI,GAAf,uBACA,eAACL,EAAA,EAAD,CAAMC,MAAI,EAACI,GAAI,GAAf,UAAmB,sBAAMC,UAAU,QAAhB,6BAAnB,IAAmEV,EAAMsC,MAAzE,IAAgF,sBAAM5B,UAAU,QAAhB,uBAChF,eAACN,EAAA,EAAD,CAAMC,MAAI,EAACI,GAAI,GAAf,UAAmB,sBAAMC,UAAU,QAAhB,6BAAnB,IAAmEV,EAAMuC,QACzE,cAACnC,EAAA,EAAD,CAAMC,MAAI,EAACI,GAAI,GAAf,SACA,cAAC,IAAD,CAAMC,UAAU,OAAOC,QAAS,CAAEC,IAAK,GAAIC,MAAO,KAAlD,SACA,cAACK,EAAA,EAAD,CAAMC,MAAOW,EAAWpB,UAAU,MAAMiB,QAAS3B,EAAM2B,QAAvD,SACI,sBAAMjB,UAAU,WAAhB,yCAXxB,WCuKL8B,MApLf,WAAe,IAAD,EAE8BC,mBAAS,GAFvC,mBAEHC,EAFG,KAEWC,EAFX,OAGgBF,mBAAS,GAHzB,mBAGHH,EAHG,KAGIM,EAHJ,OAIgBH,mBAAS,SAJzB,mBAIHI,EAJG,KAIIC,EAJJ,OAKwBL,mBAAS,SALjC,mBAKHM,EALG,KAKQC,EALR,KAMNC,EAAU,EACVC,EAAU,EAPJ,EAQoBT,oBAAS,GAR7B,mBAQHU,EARG,KAQMC,EARN,KAyBV,SAASC,IACDF,MAGJF,GACe,KACXA,EAAU,EACVC,KAEJJ,GAAUI,EAAWA,EAAU,EAAIA,EAAU,IAAMA,EAAW,MAAQ,KAAOD,EAAU,EAAIA,EAAU,IAAMA,KAK/G,IADA,IAAIK,EAAY,GACPC,EAAI,EAAGA,EAAI,GAAIA,IACnBD,EAAUC,GAAK,CACZ7B,GAAI6B,EACJpD,QAASqD,KAAKC,MAAMF,EAAI,GACxBvC,WAAW,EACXC,UAAU,GAIlB,SAASyC,IACL,OAAOJ,EAAUK,MAAM,iBAAM,GAAKH,KAAKI,YAE3C,IAAIC,EAAgBH,IAnDV,EAoDsBjB,mBAASoB,GApD/B,mBAoDHC,EApDG,KAoDOC,EApDP,KAsDV,SAASC,EAAYpC,GAEH,IAAVU,GAAgC,IAAjBI,IA7CH,IAAZS,GACHH,EAAaiB,YAAYZ,EAAK,MA0CR,IAMjB3B,EAAOE,EAAMsC,OAAbxC,GAON,GANAA,EAAKyC,SAASzC,EAAI,IAMa,IAJPoC,EAASM,QAAO,SAAAlE,GACpC,OAA0B,IAAnBA,EAAKc,YAAwC,IAAlBd,EAAKe,YAGvBoD,OAApB,CAKA,IAAIC,EAAYR,EAASS,WAAU,SAAArE,GAAI,OAAIA,EAAKwB,KAAOA,KACnD8C,EAAQ,YAAOV,GACnBU,EAASF,GAAWtD,WAAY,EAChC+C,EAAYS,GAES,IAAjB9B,EACAC,EAAgB,GACQ,IAAjBD,IACPC,EAAgB,GAChBC,GAAS,SAAC6B,GACN,OAAkB,IAAdA,EACO,EAEAA,EAAY,KAG3BC,QAAQC,IAAIrC,GAMpB,WACI,IAAMsC,EAAed,EAASM,QAAO,SAAAlE,GACjC,OAA0B,IAAnBA,EAAKc,YAAwC,IAAlBd,EAAKe,YAG3C,GAAI2D,EAAa,GAAGzE,UAAYyE,EAAa,GAAGzE,QAAQ,CACpD,IAAI0E,EAAaf,EAASS,WAAU,SAAArE,GAAS,OAAOA,EAAKwB,KAAOkD,EAAa,GAAGlD,MAC5E8C,EAAQ,YAAOV,GACnBU,EAASK,GAAY5D,UAAW,EAChC8C,EAAYS,GAEZ,IAAIM,EAAahB,EAASS,WAAU,SAAArE,GAAS,OAAOA,EAAKwB,KAAOkD,EAAa,GAAGlD,MAC5EqD,EAAS,YAAOjB,GACpBU,EAASM,GAAY7D,UAAW,EAChC8C,EAAYgB,GAEZpC,EAAgB,GA8BG,GAHNmB,EAASM,QAAO,SAAAlE,GAC7B,OAAyB,IAAlBA,EAAKe,YAEHoD,SAGTW,YAAW,kBAAM5B,GAAW,KAAO,KACnCN,EAASD,GA9HT6B,QAAQC,IAAI,SACZM,cAAclC,GACdE,EAAU,EACVC,EAAU,QA4FV8B,YAAW,kBAKnB,WACI,IAAME,EAAcpB,EAASM,QAAO,SAAAlE,GAChC,OAA0B,IAAnBA,EAAKc,YAAwC,IAAlBd,EAAKe,YAGvC4D,EAAaf,EAASS,WAAU,SAAArE,GAAS,OAAOA,EAAKwB,KAAOwD,EAAY,GAAGxD,MACvE8C,EAAQ,YAAOV,GACnBU,EAASK,GAAY7D,WAAY,EACjC+C,EAAYS,GAEZ,IAAIM,EAAahB,EAASS,WAAU,SAAArE,GAAS,OAAOA,EAAKwB,KAAOwD,EAAY,GAAGxD,MAClE,YAAOoC,GACVgB,GAAY9D,WAAY,EAClC+C,EAAYS,GAEZ7B,EAAgB,GApBCwC,KAAY,KAxB7BC,KAwER,OACI,8BACA,eAACrD,EAAA,EAAD,CAAWC,SAAS,KAApB,UACI,eAAC5B,EAAA,EAAD,CAAM6B,WAAS,EAACoD,UAAU,SAASjD,QAAQ,aAAaD,WAAW,SAAnE,UACI,eAAC/B,EAAA,EAAD,CAAMC,MAAI,EAAC4B,WAAS,EAACE,WAAW,UAAUzB,UAAU,WAApD,UACI,cAACN,EAAA,EAAD,CAAMC,MAAI,EAACI,GAAI,EAAf,2BACA,eAACL,EAAA,EAAD,CAAMC,MAAI,EAACI,GAAI,EAAf,UAAmB6B,EAAnB,IAA0B,sBAAM5B,UAAU,QAAhB,sBAC1B,eAACN,EAAA,EAAD,CAAMC,MAAI,EAACI,GAAI,EAAf,cAAoBoC,QAExB,cAACzC,EAAA,EAAD,CAAMC,MAAI,EAAC4B,WAAS,EAACC,QAAS,EAA9B,SACK4B,EAASwB,KAAI,SAAApF,GAAS,OAAO,cAAC,EAAD,CAAuBwB,GAAIxB,EAAKwB,GAAIxB,KAAMA,EAAMyB,QAASqC,GAA3C9D,EAAKwB,YAGxDyB,EAAU,cAAC,EAAD,CAAUZ,KAAMM,EAAOP,MAAOA,EAAOX,QAxBxD,WACIgB,EAAgB,GAChBG,EAAS,SACTG,EAAU,EACVC,EAAU,EACVE,GAAW,GACXS,EAAgBH,IAChBK,EAAYF,GACZjB,EAAS,MAgBsE,WChLvF2C,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.23dba81b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/back.7c2c3c2e.png\";","import React from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tilt from 'react-tilt';\r\nimport Flip from 'react-reveal/Flip';\r\nimport backImg from \"./Images/back.png\";\r\nimport RubberBand from 'react-reveal/RubberBand';\r\n\r\nfunction OneCard(props){\r\n\r\n    const cardStyle = {\r\n        borderRadius: '8px',\r\n        boxShadow: '2px 2px 10px grey'\r\n    };\r\n\r\n    var cardImage = \"\";\r\n    if (props.card.matchId === 0){\r\n        cardImage = \"https://i.imgur.com/mGPuV2q.jpg\";\r\n    } else if (props.card.matchId === 1){\r\n        cardImage = \"https://i.imgur.com/RXjE6Sd.jpg\";\r\n    } else if (props.card.matchId === 2){\r\n        cardImage = \"https://i.imgur.com/iWDumsN.jpg\";\r\n    } else if (props.card.matchId === 3){\r\n        cardImage = \"https://i.imgur.com/VA8o92j.jpg\";\r\n    } else if (props.card.matchId === 4){\r\n        cardImage = \"https://i.imgur.com/lQlFUcZ.jpg\";\r\n    } else if (props.card.matchId === 5){\r\n        cardImage = \"https://i.imgur.com/SWwdEUb.jpg\";\r\n    }\r\n\r\n    return (\r\n        <Grid item lg={3} md={4} sm={4} xs={6}>\r\n        <Tilt className=\"Tilt\" options={{ max: 25, scale: 1.1}}>\r\n        <Flip right spy={props.card.isFlipped}>\r\n        <RubberBand spy={props.card.isSolved}>\r\n        <Card lg={3} md={4} sm={4} xs={6} style={cardStyle}>\r\n            <CardMedia \r\n            component=\"img\" \r\n            src= {props.card.isFlipped ? cardImage : backImg}\r\n            id= {props.card.id}\r\n            onClick= {props.card.isSolved || props.card.isFlipped ? null : (event) => props.onClick(event)}\r\n            />\r\n        </Card>\r\n        </RubberBand>\r\n        </Flip> \r\n        </Tilt>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default OneCard;","import React from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tilt from 'react-tilt'\r\nimport Container from '@material-ui/core/Container';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Tada from 'react-reveal/Tada';\r\n\r\nfunction GameOver(props){\r\n\r\n    const cardStyle = {\r\n        borderRadius: '8px',\r\n        boxShadow: '2px 2px 10px grey'\r\n    };\r\n\r\n    return (\r\n        <div className=\"gameOver\">\r\n            <Container maxWidth=\"lg\">\r\n                <Grid container spacing={0} alignItems=\"center\" justify=\"center\">\r\n                    <Grid item item xs={8} sm={6}>\r\n                        <Tada>\r\n                            <Card style={cardStyle}>\r\n                                <CardContent>\r\n                                    <Grid container alignItems=\"center\" justify=\"center\" className=\"title\">\r\n                                        <Grid item xs={12}>Good job!</Grid>\r\n                                        <Grid item xs={12}><span className=\"stats\">You finished in</span> {props.turns} <span className=\"stats\">turns,</span></Grid>\r\n                                        <Grid item xs={12}><span className=\"stats\">and it took you</span> {props.time}</Grid>\r\n                                        <Grid item xs={10}>\r\n                                        <Tilt className=\"Tilt\" options={{ max: 25, scale: 1.1}}>\r\n                                        <Card style={cardStyle} className=\"btn\" onClick={props.onClick}>\r\n                                            <span className=\"btn-text\">Play again?</span>\r\n                                        </Card>\r\n                                        </Tilt>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Tada>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameOver;","import React, {useState} from \"react\";\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport OneCard from \"./Card\";\r\nimport GameOver from \"./GameOver\";\r\n\r\nfunction App(){\r\n\r\n    const [flippedCards, setFlippedCards] = useState(0);    \r\n    const [turns, setTurns] = useState(0);\r\n    const [timer, setTimer] = useState(\"00:00\");\r\n    const [stopwatch, setStopwatch] = useState(\"00:00\");\r\n    var seconds = 0;\r\n    var minutes = 0;\r\n    const [gameWon, setGameWon] = useState(false);\r\n\r\n    function startTimer() {\r\n        if (gameWon === false){\r\n         setStopwatch(setInterval(add, 1000));\r\n        }\r\n         return;\r\n    }\r\n\r\n    function stopTimer(){\r\n            console.log(\"hello\");\r\n            clearInterval(stopwatch);\r\n            seconds = 0;\r\n            minutes = 0;\r\n            return;\r\n    }\r\n  \r\n    function add() {\r\n        if (gameWon){\r\n            return;\r\n        }\r\n        seconds++;\r\n        if (seconds >= 60) {\r\n            seconds = 0;\r\n            minutes++;\r\n        }\r\n        setTimer((minutes ? (minutes > 9 ? minutes : \"0\" + minutes) : \"00\") + \":\" + (seconds > 9 ? seconds : \"0\" + seconds))   \r\n        return;\r\n    }\r\n\r\n    var cardArray = [];\r\n    for (var i = 0; i < 12; i++){\r\n         cardArray[i] = {\r\n            id: i,\r\n            matchId: Math.floor(i / 2),\r\n            isFlipped: false,\r\n            isSolved: false\r\n        }\r\n    };\r\n\r\n    function shuffleCards(){\r\n        return cardArray.sort( () => .5 - Math.random() );\r\n    }\r\n    let shuffledCards = shuffleCards();\r\n    const [allCards, setAllCards] = useState(shuffledCards)\r\n\r\n    function handleClick(event){\r\n        \r\n        if (turns === 0 && flippedCards === 0){\r\n            startTimer();\r\n        }\r\n\r\n        let { id } = event.target;\r\n        id = parseInt(id, 10)\r\n\r\n        const allFlippedCards = allCards.filter(card => {\r\n            return card.isFlipped === true && card.isSolved === false\r\n        })\r\n\r\n        if (allFlippedCards.length === 2){\r\n            return;\r\n        }\r\n\r\n\r\n        let cardIndex = allCards.findIndex(card => card.id === id);\r\n        let newArray = [...allCards];\r\n        newArray[cardIndex].isFlipped = true; \r\n        setAllCards(newArray)\r\n\r\n        if (flippedCards === 0){\r\n            setFlippedCards(1);\r\n        } else if (flippedCards === 1){\r\n            setFlippedCards(2);\r\n            setTurns((prevValue) => {\r\n                if (prevValue === 0){\r\n                    return 1;\r\n                } else {\r\n                    return prevValue + 1;\r\n                }\r\n            });\r\n            console.log(turns);\r\n            cardMatch();\r\n        } \r\n        return;\r\n    }\r\n\r\n    function cardMatch(){\r\n        const cardsToMatch = allCards.filter(card => {\r\n            return card.isFlipped === true && card.isSolved === false\r\n        })\r\n\r\n        if (cardsToMatch[0].matchId === cardsToMatch[1].matchId){\r\n            let cardIndex1 = allCards.findIndex(card => {return card.id === cardsToMatch[0].id});\r\n            let newArray = [...allCards];\r\n            newArray[cardIndex1].isSolved = true; \r\n            setAllCards(newArray)\r\n\r\n            let cardIndex2 = allCards.findIndex(card => {return card.id === cardsToMatch[1].id});\r\n            let newArray2 = [...allCards];\r\n            newArray[cardIndex2].isSolved = true; \r\n            setAllCards(newArray2)\r\n\r\n            setFlippedCards(0);\r\n            checkWin();\r\n        } else {\r\n            setTimeout(() => flipBack(), 800);\r\n        }\r\n\r\n    }\r\n\r\n    function flipBack(){\r\n        const cardsToFlip = allCards.filter(card => {\r\n            return card.isFlipped === true && card.isSolved === false\r\n        })\r\n\r\n        let cardIndex1 = allCards.findIndex(card => {return card.id === cardsToFlip[0].id});\r\n            let newArray = [...allCards];\r\n            newArray[cardIndex1].isFlipped = false;\r\n            setAllCards(newArray)\r\n\r\n            let cardIndex2 = allCards.findIndex(card => {return card.id === cardsToFlip[1].id});\r\n            let newArray2 = [...allCards];\r\n            newArray2[cardIndex2].isFlipped = false;\r\n            setAllCards(newArray)\r\n\r\n            setFlippedCards(0);\r\n    };\r\n\r\n    function checkWin(){\r\n        const unsolved = allCards.filter(card => {\r\n            return card.isSolved === false\r\n        })\r\n        if (unsolved.length != 0){\r\n            return;\r\n        } else {\r\n            setTimeout(() => setGameWon(true), 1000)\r\n            setTimer(timer);\r\n            stopTimer();\r\n            return;\r\n        };\r\n    };\r\n\r\n    function restartGame(){\r\n        setFlippedCards(0);\r\n        setTimer(\"00:00\");\r\n        seconds = 0;\r\n        minutes = 0;\r\n        setGameWon(false);\r\n        shuffledCards = shuffleCards();\r\n        setAllCards(shuffledCards);\r\n        setTurns(0);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n        <Container maxWidth=\"lg\">\r\n            <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"center\">\r\n                <Grid item container alignItems=\"stretch\" className=\"headings\">\r\n                    <Grid item xs={6}>Perfect Match</Grid>\r\n                    <Grid item xs={3}>{turns} <span className=\"stats\">turns</span></Grid>\r\n                    <Grid item xs={3}> {timer}</Grid>\r\n                </Grid>\r\n                <Grid item container spacing={4}>\r\n                    {allCards.map(card => {return <OneCard key={card.id} id={card.id} card={card} onClick={handleClick} />})}\r\n                </Grid>\r\n            </Grid>\r\n            {gameWon ? <GameOver time={timer} turns={turns} onClick={restartGame} /> : null}\r\n        </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\n"],"sourceRoot":""}